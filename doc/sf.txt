==============================================================================
------------------------------------------------------------------------------
help --------------------


==============================================================================
------------------------------------------------------------------------------
                                                                          *Term*
                                     `Term`
Class ~
{Term}
Fields ~
{win} `(number)` Floating Window's ID
{buf} `(number)` Terminal Buffer's ID
{terminal} `(optional)` `(number)` Terminal's job id
{config} Config

------------------------------------------------------------------------------
                                                                    *Term:new()*
                                  `Term:new`()
creates a new terminal instance

------------------------------------------------------------------------------
                                                                  *Term:setup()*
                              `Term:setup`({cfg})
overrides the terminal windows configuration ie. dimensions
Parameters ~
{cfg} Config
Return ~
Term

------------------------------------------------------------------------------
                                                                  *Term:store()*
                           `Term:store`({win}, {buf})
adds the given floating windows and buffer to the list
Parameters ~
{win} `(number)` Floating Window's ID
{buf} `(number)` Terminal Buffer's ID
Return ~
Term

------------------------------------------------------------------------------
                                                        *Term:remember_cursor()*
                            `Term:remember_cursor`()
stores the last cursor position and window
Return ~
Term

------------------------------------------------------------------------------
                                                         *Term:restore_cursor()*
                            `Term:restore_cursor`()
restores the cursor to the last remembered position
Return ~
Term

------------------------------------------------------------------------------
                                             *Term:use_existing_or_create_buf()*
                      `Term:use_existing_or_create_buf`()
creates a scratch buffer for floating window to consume
Return ~
`(number)` Terminal Buffer's ID

------------------------------------------------------------------------------
                                                    *Term:create_and_open_win()*
                       `Term:create_and_open_win`({buf})
Parameters ~
{buf} `(number)` Terminal Buffer's ID
Return ~
`(number)` Floating Window's ID

------------------------------------------------------------------------------
                                                           *Term:start_insert()*
                             `Term:start_insert`()
Return ~
Term

------------------------------------------------------------------------------
                                                          *Term:scroll_to_end()*
                             `Term:scroll_to_end`()
Return ~
Term

------------------------------------------------------------------------------
                                                            *Term:create_term()*
                              `Term:create_term`()
creates and opens a terminal inside a buffer
Return ~
Term

------------------------------------------------------------------------------
                                                                   *Term:open()*
                                 `Term:open`()
does all the magic of opening terminal
Return ~
Term

------------------------------------------------------------------------------
                                                                  *Term:close()*
                             `Term:close`({force})
does all the magic of closing terminal and clearing the buffers/windows
Parameters ~
{force} `(optional)` `(boolean)` If true, kill the terminal otherwise hide it
Return ~
Term

------------------------------------------------------------------------------
                                                                 *Term:toggle()*
                                `Term:toggle`()
is used to toggle the terminal window
Return ~
Term

------------------------------------------------------------------------------
                                                                    *Term:run()*
                             `Term:run`({command})
is used to (open and) run commands to terminal window
Parameters ~
{command} `(string)`
Return ~
Term

------------------------------------------------------------------------------
help -------------------

------------------------------------------------------------------------------
Class ~
{Dimensions} - Every field inside the dimensions should be b/w `0` to `1`
Fields ~
{height} `(number:)` Height of the floating window (default: `0.8`)
{width} `(number:)` Width of the floating window (default: `0.8`)
{x} `(number:)` X-Axis of the floating window (default: `0.5`)
{y} `(number:)` Y-Axis of the floating window (default: `0.5`)

------------------------------------------------------------------------------
Class ~
{Config}
Fields ~
{ft} `(string:)` Filetype of the terminal buffer (default: `SFTerm`)
{cmd} `(string|string[]:)` string|string[] to run inside the terminal (default: `os.getenv('SHELL'`))
{border} `(string:)` Border type for the floating window. See `:h nvim_open_win` (default: `single`)
{auto_close} `(boolean:)` Close the terminal as soon as command exits (default: `true`)
{hl} `(string:)` Highlight group for the terminal buffer (default: `true`)
{blend} `(number:)` Transparency of the floating window (default: `true`)
{clear_env} `(boolean:)` Replace instead of extend the current environment with `env` (default: `false`)
{env} `(table:)` Map of environment variables extending the current environment (default: `nil`)
{on_exit} `(function:)` Callback invoked when the terminal exits (default: `nil`)
{on_stdout} `(function:)` Callback invoked when the terminal emits stdout data (default: `nil`)
{on_stderr} `(function:)` Callback invoked when the terminal emits stderr data (default: `nil`)
{dimensions} Dimensions: Dimensions of the floating window

------------------------------------------------------------------------------
                                                                    *H.defaults*
                                  `H.defaults`
Type ~
Config

------------------------------------------------------------------------------
                                                             *H.get_dimension()*
                           `H.get_dimension`({opts})
terminal dimension relative to the viewport
Parameters ~
{opts} Dimensions
Return ~
`(table)`

------------------------------------------------------------------------------
                                                              *H.is_win_valid()*
                            `H.is_win_valid`({win})
whether the window is valid
Parameters ~
{win} `(number)` Window ID
Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                              *H.is_buf_valid()*
                            `H.is_buf_valid`({buf})
whether the buffer is valid
Parameters ~
{buf} `(number)` Buffer ID
Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                                    *H.is_cmd()*
                               `H.is_cmd`({cmd})
a valid command from user's input
Parameters ~
{cmd} `(string|string[])`
Return ~
`(string|string[])`


==============================================================================
------------------------------------------------------------------------------
                                                                        *Prompt*
                                    `Prompt`
Class ~
{Prompt}
Fields ~
{win} `(number)`
{buf} `(number)`
{class} `(string)`
{tests} `(table)`


==============================================================================
------------------------------------------------------------------------------
*sf.ts* Sf Treesitter

MIT License Copyright (c) 2024 Xi Xiao

==============================================================================

Features:
- Provide useful APIs from Treesitter parsed Apex file.


------------------------------------------------------------------------------
================== Help ========================


 vim:tw=78:ts=8:noet:ft=help:norl: